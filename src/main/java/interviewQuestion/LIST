Interface: (list of things) -
A List is an ordered Collection (sometimes called a sequence).
Lists may contain duplicate elements.
Elements can be inserted or accessed by their position in the list, using a zero-based index.
They are dynamic sized - resizable. The List interface can allow n number of null values.

● ArrayList - class:
    ○ It is a class implements List interface and it is based on an Array data structure.
    It is widely used because of the functionality and flexibility it offers.
    ○ It is resizable unlike the Arrays.
      ArrayList can dynamically grow and shrink after addition and removal of elements
    ○ It has a fast iteration and is ordered by index. Preferably to use when searching for an element/object.
    ○ It is not sorted but can be sorted using Collections.sort() method.
● LinkedList - class:
    ○ LinkedList is a linear data structure.
    ○ LinkedList uses a doubly linked list.
    ○ LinkedList does not provide random access.
    ○ It has slower iteration but faster addition and deletion. Preferably to use when adding and deleting an object/element.
● V ector -class:
○ Vector implements List Interface.
○ Like ArrayList it is synchronized (thread-safe) and due to which it gives poor performance in searching, adding, deleting and updating of its elements.
○ Vector has a child class: Stack
■ Stack: synchronized (thread-safe)
■ pop(): LIFO ==> Last in First Out - removes the last object from the stack